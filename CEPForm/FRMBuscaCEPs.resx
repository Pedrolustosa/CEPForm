<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAOwAAADsAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKoAAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAKkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAA
        ABEAAAARAAICegQFGfsEBRn9AgIGfAAAABEAAAARAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAC8CAgj3JzG+/xkapf8CAgr7AAAAMwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAQAgIJ5h8nkP01Q/T/LTbl/xISdv8CAw7vAAAAEwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAQMDCrYRFk33NUP0/zVD9P81Q/T/KC7a/wsMSv4DBBHCAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAgR3Bggd9jI/5/81Q/T/NUP0/zVD9P81Q/P/ISTJ/wUG
        If0CAgt5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AA/4AAAf+AAAH/wAAD/+AAB//4AB///gB/8=
</value>
  </data>
</root>